# Part of the examples from the Parallel and High Performance Computing
# Robey and Zamora, Manning Publications
#   https://github.com/EssentialsofParallelComputing/Chapter3
#
# The built image can be found at:
#
#   https://hub.docker.com/r/essentialsofparallelcomputing/chapter3
#
# Author:
# Bob Robey <brobey@earthlink.net>

FROM ubuntu:20.04 AS builder
LABEL maintainer Bob Robey <brobey@earthlink.net>

ARG DOCKER_LANG=en_US
ARG DOCKER_TIMEZONE=America/Denver

WORKDIR /tmp
RUN apt-get -qq update && \
    DEBIAN_FRONTEND=noninteractive \
    apt-get -qq install -y locales tzdata && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

ENV LANG=$DOCKER_LANG.UTF-8 \
    LANGUAGE=$DOCKER_LANG:UTF-8

RUN ln -fs /usr/share/zoneinfo/$DOCKER_TIMEZONE /etc/localtime && \
    locale-gen $LANG && update-locale LANG=$LANG && \
    dpkg-reconfigure -f noninteractive locales tzdata

ENV LC_ALL=$DOCKER_LANG.UTF-8

RUN apt-get -qq update && \
    DEBIAN_FRONTEND=noninteractive \
    apt-get -qq install -y cmake git vim gcc g++ gfortran software-properties-common wget gnupg-agent \
            2to3 python3-pip python3-matplotlib python3-numpy jupyter gnuplot-nox valgrind kcachegrind graphviz \
            gv xterm x11-apps evince \
            mpich libmpich-dev \
            openmpi-bin openmpi-doc libopenmpi-dev && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# likwid installed manually in container because msr is not accessible

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 30 \
                        --slave   /usr/bin/pip    pip    /usr/bin/pip3

# Installing latest GCC compiler (version 10)
RUN apt-get -qq update && \
    apt-get -qq install -y gcc-10 g++-10 gfortran-10 && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

RUN update-alternatives \
      --install /usr/bin/gcc      gcc      /usr/bin/gcc-9       80 \
      --slave   /usr/bin/g++      g++      /usr/bin/g++-9          \
      --slave   /usr/bin/gfortran gfortran /usr/bin/gfortran-9     \
      --slave   /usr/bin/gcov     gcov     /usr/bin/gcov-9      && \
    update-alternatives \
      --install /usr/bin/gcc      gcc      /usr/bin/gcc-10      90 \
      --slave   /usr/bin/g++      g++      /usr/bin/g++-10         \
      --slave   /usr/bin/gfortran gfortran /usr/bin/gfortran-10    \
      --slave   /usr/bin/gcov     gcov     /usr/bin/gcov-10     && \
    chmod u+s /usr/bin/update-alternatives

# Installing Intel compilers since they give the best vectorization among compiler vendors
# Also installing Intel Advisor to look at vectorization performance
RUN wget -q https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
RUN apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
RUN rm -f GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
RUN echo "deb https://apt.repos.intel.com/oneapi all main" >> /etc/apt/sources.list.d/oneAPI.list
RUN echo "deb [trusted=yes arch=amd64] https://repositories.intel.com/graphics/ubuntu bionic main" >> /etc/apt/sources.list.d/intel-graphics.list
RUN apt-get -qq update && \
    apt-get -qq install -y \
             intel-hpckit-getting-started \
             intel-oneapi-common-vars \
             intel-oneapi-common-licensing \
             intel-oneapi-dev-utilities \
             intel-oneapi-dpcpp-cpp-compiler-pro \
             intel-oneapi-ifort \
             intel-oneapi-advisor && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Needed libraries for Intel Advisor graphics user interface
RUN apt-get -qq update && \
    apt-get -qq install -y libgtk2.0-0 libxxf86vm1 libsm6 libnss3 libnss3 libx11-xcb1 libxtst6 \
            libasound2 libatk-bridge2.0-0 && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Changing config to install in /usr and to use perf events instead of access daemons to 
# try and get around permission limitations in a Docker container
RUN update-alternatives --set gcc /usr/bin/gcc-9
RUN wget --no-verbose http://ftp.fau.de/pub/likwid/likwid-5.0.1.tar.gz && tar -xzf likwid-5.0.1.tar.gz && \
    cd likwid-5.0.1 && sed -i -e '/ACCESSMODE/s!accessdaemon!perf_event!' \
       -e '/PREFIX/s!/usr/local!/usr!' -e '/BUILDFREQ/s/true/false/' config.mk && \
    make && make install && cd .. && rm -rf likwid-5.0.1
RUN update-alternatives --set gcc /usr/bin/gcc-10


SHELL ["/bin/bash", "-c"]

RUN groupadd chapter3 && useradd -m -s /bin/bash -g chapter3 chapter3

RUN usermod -a -G video chapter3

WORKDIR /home/chapter3
RUN chown -R chapter3:chapter3 /home/chapter3
USER chapter3

ENV LANG='en_US.UTF-8'
ENV DISPLAY=:0
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=display,graphics,utility
#RUN source /opt/intel/oneapi/setvars.sh
# You may want to "source /opt/intel/oneapi/setvars.sh" to get the full set of environment variables
ENV MANPATH=/opt/intel/oneapi/compiler/latest/documentation/en/man/common:${MAN_PATH}
ENV LD_LIBRARY_PATH=/opt/intel/oneapi/compiler/latest/linux/lib:/opt/intel/oneapi/compiler/latest/linux/lib/x64:/opt/intel/oneapi/compiler/latest/linux/lib/emu:/opt/intel/oneapi/compiler/latest/linux/lib/oclfpga/linux64/lib:/opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin:/opt/intel/oneapi/compiler/latest/linux/compiler/lib:${LD_LIBRARY_PATH}
ENV PATH=/opt/intel/oneapi/compiler/latest/linux/bin/intel64:/opt/intel/oneapi/compiler/latest/linux/bin:/opt/intel/oneapi/compiler/latest/linux/ioc/bin:/opt/intel/oneapi/dev-utilities/latest/bin:/opt/intel/oneapi/advisor/latest/bin64:${PATH}
ENV ADVISOR_2021_DIR=/opt/intel/oneapi/advisor/2021.1-beta10
ENV PKG_CONFIG_PATH=/opt/intel/oneapi/advisor/2021.1-beta10/include/pkgconfig/lib64:${PKG_CONFIG_PATH}
ENV APM=/opt/intel/oneapi/advisor/2021.1-beta10/perfmodels
ENV PYTHONPATH=/opt/intel/oneapi/advisor/2021.1-beta10/pythonapi:${PYTHONPATH}

RUN git clone --recursive https://github.com/essentialsofparallelcomputing/Chapter3.git

WORKDIR /home/chapter3/Chapter3
#RUN make

ENTRYPOINT ["bash"]
